//* C program for Merge Sort */
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

// Merges two subarrays of arr[].
// First subarray is arr[l..m]
// Second subarray is arr[m+1..r]
void preenche(int *arr, int tam){
    int i;
    if (arr != NULL){
        for(i = 0; i < tam; i++)
            arr[i] = 1 + rand() % 100000; // preenchimento do vetor
    }
}
void merge(int *arr, int l, int m, int tam)
{
    int i, j, k;
    int n1 = m - l + 1;
    int n2 = tam- m;

    /* create temp arrays */
    int *L, *R;
    L = (int*) malloc(n1*sizeof(int));
    R = (int*) malloc(n2*sizeof(int));

    /* Copy data to temp arrays L[] and R[] */
    for (i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for (j = 0; j < n2; j++)
        R[j] = arr[m + 1 + j];

    /* Merge the temp arrays back into arr[l..r]*/
    i = 0; // Initial index of first subarray
    j = 0; // Initial index of second subarray
    k = l; // Initial index of merged subarray
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        }
        else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }

    /* Copy the remaining elements of L[], if there
    are any */
    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }

    /* Copy the remaining elements of R[], if there
    are any */
    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}

/* l is for left index and r is right index of the
sub-array of arr to be sorted */
void mergeSort(int *arr, int l, int tam)
{
    if (l < tam) {
        // Same as (l+r)/2, but avoids overflow for
        // large l and h
        int m = l + (tam - l) / 2;

        // Sort first and second halves
        mergeSort(arr, l, m);
        mergeSort(arr, m + 1, tam);

        merge(arr, l, m, tam);
    }
}

/* UTILITY FUNCTIONS */
/* Function to print an array */
void printArray (int *arr, int tam){
    int i;
    for (i = 0; i < tam; i++)
        printf("\n[%d] ", arr[i]);
    printf("\n");
}

/* Driver code */
int main(){
    int tam, i, *arr;
    clock_t t;
    printf("tamanho do vetor: ");
    scanf("%d", &tam);
    arr = (int *) malloc(tam * sizeof(int));
    preenche(arr, tam);

    printf("Given array is \n");
    printArray(arr, tam);

    t = clock();
    mergeSort(arr, 0, tam - 1);
    t = clock() - t;


    printf("\nSorted array is \n");
    printArray(arr, tam);

    //printf("\n\nTempo de execucao em ms mergesort: %f", (double)(end - begin) *1000 / CLOCKS_PER_SEC);
    printf("Tempo de execucao: %f", ((double)t)/((CLOCKS_PER_SEC/1000)));//milisegundo
    free(arr);
    return 0;
}
