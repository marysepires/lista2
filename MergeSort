//* C program for Merge Sort */
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

// Merges two subarrays of arr[].
// First subarray is arr[l..m]
// Second subarray is arr[m+1..r]
void preenche(int *arr, int tam){
    int i;
    if (arr != NULL){
        for(i = 0; i < tam; i++)
            arr[i] = 1 + rand() % 1000000; // preenchimento do vetor com valores aléatorios entre 1 e 1 milhão
    }
}
void merge(int *vet, int ini, int m, int tam){
    int i, j, k, n1, n2;

    n1 = m - ini + 1;
    n2 = tam- m;

    /* create temp arrays */
    int *aux1, *aux2;
    aux1 = (int*) malloc(n1*sizeof(int));
    aux2 = (int*) malloc(n2*sizeof(int));

    /* Copy data to temp arrays L[] and R[] */
    for (i = 0; i < n1; i++)
        aux1[i] = vet[ini + i];
    for (j = 0; j < n2; j++)
        aux2[j] = vet[m + 1 + j];

    /* Merge the temp arrays back into arr[l..r]*/
    i = 0; // Initial index of first subarray
    j = 0; // Initial index of second subarray
    k = ini; // Initial index of merged subarray
    while (i < n1 && j < n2) {
        if (aux1[i] <= aux2[j]) {
            vet[k] = aux1[i];
            i++;
        }
        else {
            vet[k] = aux2[j];
            j++;
        }
        k++;
    }

    /* Copy the remaining elements of L[], if there
    are any */
    while (i < n1) {
        vet[k] = aux1[i];
        i++;
        k++;
    }

    /* Copy the remaining elements of R[], if there
    are any */
    while (j < n2) {
        vet[k] = aux2[j];
        j++;
        k++;
    }
    free(aux1);
    free(aux2);
}

/* l is for left index and r is right index of the
sub-array of arr to be sorted */
void mergeSort(int *vet, int ini, int tam){
    if (ini < tam) {
        // Same as (l+r)/2, but avoids overflow for
        // large l and h
        int m = ini + (tam - ini) / 2;

        // Sort first and second halves
        mergeSort(vet, ini, m);
        mergeSort(vet, m + 1, tam);

        merge(vet, ini, m, tam);
    }
}

/* UTILITY FUNCTIONS */
/* Function to print an array */
void imprime (int *vet, int tam){
    int i;
    for (i = 0; i < tam; i++)
        printf("\n[%d] ", vet[i]);
    printf("\n");
}

/* Driver code */
int main(){
    int tam, i, *vet;
    clock_t t;
    printf("tamanho do vetor: ");
    scanf("%d", &tam);
    vet = (int *) malloc(tam * sizeof(int));
    preenche(vet, tam);

    printf("\nAntes da ordenação\n");
   // imprime(vet, tam);

    t = clock();
    mergeSort(vet, 0, tam - 1);
    t = clock() - t;


    printf("\nVetor Ordenado\n");
   // imprime(vet, tam);


    printf("Tempo de execucao: %f", ((double)t)/((CLOCKS_PER_SEC/1000)));// tempo de execução em milisegundo
    free(vet);
    return 0;
}

