#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void preenche(int *vet, int tam){ // função responsavel por preencher o vetor
    int i;
    if (vet != NULL){ // verifica se o vetor está vazio
        for(i = 0; i < tam; i++){ // percorre o vetor para preencher
            vet[i] = 1 + rand() % 100000; // preenchimento do vetor com valores aletorios de 1 a 1 milhão
        }
    }
}
void imprime (int *vet, int tam){ // função responsavel por imprimir o vetor
    int i;
    for(i = 0; i < tam; i++){ // percorre o vetor para a impressão
        printf(" |%d| ", vet[i]); // imprime o vetor
    }
}
void insert_sort(int *vet, int tam){ // função de ordenação metodo inserção
    int i=0, j, chave;

    for( j = 1; j<tam;j++){ // percorre o vetor completamente
        chave = vet[j]; // guardamos o elemento atual em chave
        i = j-1;

    while(i >= 0 && vet[i]>chave){ // percorre o vetor para trás empurrando o elemento para o início do vetor
        vet[i+1] = vet[i];
        i = i-1;
    }
    vet[i+1] = chave; //insere o elemento no seu lugar
    }
}
int main(){ // função principal
   int n, i, *vet, tam;

    printf("Tamanho do vetor: "); // inserção do tamanho do vetor
    scanf("%d", &tam); // armazena na variavel tam o tamanho inserido para o vetor
    vet = (int *) malloc(tam * sizeof(int)); // aloca a mémoria
    preenche(vet, tam); // função preenche vetor

    //printf("\nAntes da ordenação\n");
    //imprime(vet, tam); // imprime vetor antes da ordenação (função comentada pois foi usada para testes)
    printf("\n------");
    clock_t begin = clock(); //armazena tempo inicial
    insert_sort(vet, tam); // função de ordenação
    clock_t end = clock(); // armazena tempo final
    //printf("\nVetor Ordenado\n");
    //imprime(vet, tam); //// imprime vetor depois da ordenação (função comentada pois foi usada para testes)
    printf("\n------");

    printf("\n\nTempo de execucao (Insercao): %f", (double)(end - begin)/ CLOCKS_PER_SEC); // calcula e imprime tempo de execução da ordenação em segundos
    free(vet); // libera memoria alocada

    return 0;
} // fim da função principal
